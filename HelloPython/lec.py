from operator import truediv
from turtle import st


print('hello world')
# пайтон язык с динамической типизацией, здесь не надо указывать явно тип данных
a=123
b=1.23
print(a)
print(b)
print(type(a)) # чтобы посмотреть тип переменной
s='mess' # строка
print(s)
ss='hello \n"world"' # эскейп последовательность перехода на новую строку
sss=" 'hello' " # меняем кавычки чтобы в строке зак5лючить в кавычки
print(sss)
print(ss)
print(f'{a}-{b}-{s}') # интерполяция строки 
# чтобы менять значения местами при интерполяции
print('{0}-{2}-{1}- '.format(b,ss,sss))

# логические переменные
f=True # с большой буквы надо
print(f)

# в пайтоне массивов нет, есть списки
list=[]
print(list)
col=[1,2,3]
print(col)
str=['1','2','3','text']
print(str)
# технически в списке можено миксовать разные типы данных, но зачем?!
# не ставить пробел перед переменной!

# чтобы считать данные из консоли, аналог рид лайн в си шарп
# print('введите а')
# a=int(input())
# print('введите в')
# b=int(input())
# print(f'{a}+{b}={a+b}')
# но! как и в си шарп, считываение из консоли это строки, чтобы указать иной тип данных, надо делать аналог конвертации

# арифметические операции: +,-,=,*,/,%,// чтобы делить как целые числа,** возведение в степень

# унарный минус классическая инверсия числа
c=2
d=3.434
# по умолчанию деление работает как для вещественных чисел
# технически нет ограничения для хранения данных по размеру
# при умножении для округления используют функцию round
e=round(c*d) # по умолчанию она округляет по математическим правилам
# если нужно конкретное колличество знаков после запятой то указываем это аргументом
g=round(d*c,3)
print(e)
print(g)

# Логические операции

# not and or 
# сравнения > < == >= <= !=
x=1>3
print(x)
# можно использовать тройные и четверные неравенства
y=2<3<4<5
print(y)
v=1>2 or 4<6
print(v)
p=[1,2,3,4]
print(2 in p) # будет тру
print( not 3 in p) # будет фолс
# как проверить на четность:
is_odd=p[0]%2==0
print(is_odd) # будет фолс
# можно по другому, 0-это ложь, 1- это истина
r=not p[2]%2 # будет равно 1, но так как мы указали оператор отрицаения,
# то это выражение как бы говорит что результат будет не 0, а не 0 это 1
print(r) # в результате на консоль выведется фолс
# этот вариант записи больше характерен для пайтона





